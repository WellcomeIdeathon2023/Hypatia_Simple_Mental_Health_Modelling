// Generated by rstantools.  Do not edit by hand.

/*
    shinyStanModels is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    shinyStanModels is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with shinyStanModels.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_fit_1a1b_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_fit_1a1b");
    reader.add_event(100, 98, "end", "model_fit_1a1b");
    return reader;
}
#include <stan_meta_header.hpp>
class model_fit_1a1b
  : public stan::model::model_base_crtp<model_fit_1a1b> {
private:
        int ntrials;
        int nsub;
        matrix_d reward;
        std::vector<std::vector<int> > choices;
public:
    model_fit_1a1b(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_fit_1a1b(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_fit_1a1b_namespace::model_fit_1a1b";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "ntrials", "int", context__.to_vec());
            ntrials = int(0);
            vals_i__ = context__.vals_i("ntrials");
            pos__ = 0;
            ntrials = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "nsub", "int", context__.to_vec());
            nsub = int(0);
            vals_i__ = context__.vals_i("nsub");
            pos__ = 0;
            nsub = vals_i__[pos__++];
            current_statement_begin__ = 5;
            validate_non_negative_index("reward", "ntrials", ntrials);
            validate_non_negative_index("reward", "nsub", nsub);
            context__.validate_dims("data initialization", "reward", "matrix_d", context__.to_vec(ntrials,nsub));
            reward = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(ntrials, nsub);
            vals_r__ = context__.vals_r("reward");
            pos__ = 0;
            size_t reward_j_2_max__ = nsub;
            size_t reward_j_1_max__ = ntrials;
            for (size_t j_2__ = 0; j_2__ < reward_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < reward_j_1_max__; ++j_1__) {
                    reward(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("choices", "ntrials", ntrials);
            validate_non_negative_index("choices", "nsub", nsub);
            context__.validate_dims("data initialization", "choices", "int", context__.to_vec(ntrials,nsub));
            choices = std::vector<std::vector<int> >(ntrials, std::vector<int>(nsub, int(0)));
            vals_i__ = context__.vals_i("choices");
            pos__ = 0;
            size_t choices_k_0_max__ = ntrials;
            size_t choices_k_1_max__ = nsub;
            for (size_t k_1__ = 0; k_1__ < choices_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < choices_k_0_max__; ++k_0__) {
                    choices[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 19;
            num_params_r__ += 1;
            current_statement_begin__ = 20;
            num_params_r__ += 1;
            current_statement_begin__ = 23;
            num_params_r__ += 1;
            current_statement_begin__ = 24;
            num_params_r__ += 1;
            current_statement_begin__ = 27;
            validate_non_negative_index("alpha_raw", "nsub", nsub);
            num_params_r__ += (1 * nsub);
            current_statement_begin__ = 28;
            validate_non_negative_index("beta_raw", "nsub", nsub);
            num_params_r__ += (1 * nsub);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_fit_1a1b() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 19;
        if (!(context__.contains_r("alpha_a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_a");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha_a", "double", context__.to_vec());
        double alpha_a(0);
        alpha_a = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(alpha_a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_a: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 20;
        if (!(context__.contains_r("beta_a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_a");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta_a", "double", context__.to_vec());
        double beta_a(0);
        beta_a = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_a: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 23;
        if (!(context__.contains_r("alpha_b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_b");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha_b", "double", context__.to_vec());
        double alpha_b(0);
        alpha_b = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, alpha_b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 24;
        if (!(context__.contains_r("beta_b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_b");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta_b", "double", context__.to_vec());
        double beta_b(0);
        beta_b = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, beta_b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("alpha_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_raw");
        pos__ = 0U;
        validate_non_negative_index("alpha_raw", "nsub", nsub);
        context__.validate_dims("parameter initialization", "alpha_raw", "double", context__.to_vec(nsub));
        std::vector<double> alpha_raw(nsub, double(0));
        size_t alpha_raw_k_0_max__ = nsub;
        for (size_t k_0__ = 0; k_0__ < alpha_raw_k_0_max__; ++k_0__) {
            alpha_raw[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_raw_i_0_max__ = nsub;
        for (size_t i_0__ = 0; i_0__ < alpha_raw_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(alpha_raw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_raw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 28;
        if (!(context__.contains_r("beta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_raw");
        pos__ = 0U;
        validate_non_negative_index("beta_raw", "nsub", nsub);
        context__.validate_dims("parameter initialization", "beta_raw", "double", context__.to_vec(nsub));
        std::vector<double> beta_raw(nsub, double(0));
        size_t beta_raw_k_0_max__ = nsub;
        for (size_t k_0__ = 0; k_0__ < beta_raw_k_0_max__; ++k_0__) {
            beta_raw[k_0__] = vals_r__[pos__++];
        }
        size_t beta_raw_i_0_max__ = nsub;
        for (size_t i_0__ = 0; i_0__ < beta_raw_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(beta_raw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 19;
            local_scalar_t__ alpha_a;
            (void) alpha_a;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_a = in__.scalar_constrain(lp__);
            else
                alpha_a = in__.scalar_constrain();
            current_statement_begin__ = 20;
            local_scalar_t__ beta_a;
            (void) beta_a;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_a = in__.scalar_constrain(lp__);
            else
                beta_a = in__.scalar_constrain();
            current_statement_begin__ = 23;
            local_scalar_t__ alpha_b;
            (void) alpha_b;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_b = in__.scalar_lb_constrain(0, lp__);
            else
                alpha_b = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 24;
            local_scalar_t__ beta_b;
            (void) beta_b;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_b = in__.scalar_lb_constrain(0, lp__);
            else
                beta_b = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 27;
            std::vector<local_scalar_t__> alpha_raw;
            size_t alpha_raw_d_0_max__ = nsub;
            alpha_raw.reserve(alpha_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_raw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha_raw.push_back(in__.scalar_constrain(lp__));
                else
                    alpha_raw.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 28;
            std::vector<local_scalar_t__> beta_raw;
            size_t beta_raw_d_0_max__ = nsub;
            beta_raw.reserve(beta_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_raw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta_raw.push_back(in__.scalar_constrain(lp__));
                else
                    beta_raw.push_back(in__.scalar_constrain());
            }
            // transformed parameters
            current_statement_begin__ = 32;
            validate_non_negative_index("alpha", "nsub", nsub);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha(nsub);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 33;
            validate_non_negative_index("beta", "nsub", nsub);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta(nsub);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 35;
            for (int p = 1; p <= nsub; ++p) {
                current_statement_begin__ = 36;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), 
                            Phi_approx((alpha_a + (alpha_b * get_base1(alpha_raw, p, "alpha_raw", 1)))), 
                            "assigning variable alpha");
                current_statement_begin__ = 37;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), 
                            stan::math::exp((beta_a + (beta_b * get_base1(beta_raw, p, "beta_raw", 1)))), 
                            "assigning variable beta");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 32;
            size_t alpha_j_1_max__ = nsub;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(alpha(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "alpha", alpha, 0);
            check_less_or_equal(function__, "alpha", alpha, 1);
            current_statement_begin__ = 33;
            size_t beta_j_1_max__ = nsub;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "beta", beta, 0);
            // model body
            current_statement_begin__ = 44;
            lp_accum__.add(normal_log<propto__>(alpha_a, 0, 5));
            current_statement_begin__ = 45;
            lp_accum__.add(cauchy_log<propto__>(alpha_b, 0, 5));
            current_statement_begin__ = 46;
            lp_accum__.add(normal_log<propto__>(beta_a, 0, 5));
            current_statement_begin__ = 47;
            lp_accum__.add(cauchy_log<propto__>(beta_b, 0, 5));
            current_statement_begin__ = 50;
            lp_accum__.add(std_normal_log<propto__>(alpha_raw));
            current_statement_begin__ = 51;
            lp_accum__.add(std_normal_log<propto__>(beta_raw));
            current_statement_begin__ = 58;
            for (int p = 1; p <= nsub; ++p) {
                {
                current_statement_begin__ = 59;
                validate_non_negative_index("Q", "2", 2);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Q(2);
                stan::math::initialize(Q, DUMMY_VAR__);
                stan::math::fill(Q, DUMMY_VAR__);
                current_statement_begin__ = 60;
                local_scalar_t__ lr(DUMMY_VAR__);
                (void) lr;  // dummy to suppress unused var warning
                stan::math::initialize(lr, DUMMY_VAR__);
                stan::math::fill(lr, DUMMY_VAR__);
                current_statement_begin__ = 62;
                stan::model::assign(Q, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable Q");
                current_statement_begin__ = 63;
                stan::model::assign(Q, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable Q");
                current_statement_begin__ = 65;
                for (int t = 1; t <= ntrials; ++t) {
                    current_statement_begin__ = 67;
                    lp_accum__.add(categorical_logit_log<propto__>(get_base1(get_base1(choices, t, "choices", 1), p, "choices", 2), multiply(Q, get_base1(beta, p, "beta", 1))));
                    current_statement_begin__ = 70;
                    stan::model::assign(Q, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(get_base1(choices, t, "choices", 1), p, "choices", 2)), stan::model::nil_index_list()), 
                                (get_base1(Q, get_base1(get_base1(choices, t, "choices", 1), p, "choices", 2), "Q", 1) + (get_base1(alpha, p, "alpha", 1) * (get_base1(reward, t, p, "reward", 1) - get_base1(Q, get_base1(get_base1(choices, t, "choices", 1), p, "choices", 2), "Q", 1)))), 
                                "assigning variable Q");
                }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha_a");
        names__.push_back("beta_a");
        names__.push_back("alpha_b");
        names__.push_back("beta_b");
        names__.push_back("alpha_raw");
        names__.push_back("beta_raw");
        names__.push_back("alpha");
        names__.push_back("beta");
        names__.push_back("loglik");
        names__.push_back("genchoices");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nsub);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nsub);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nsub);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nsub);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nsub);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ntrials);
        dims__.push_back(nsub);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_fit_1a1b_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double alpha_a = in__.scalar_constrain();
        vars__.push_back(alpha_a);
        double beta_a = in__.scalar_constrain();
        vars__.push_back(beta_a);
        double alpha_b = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha_b);
        double beta_b = in__.scalar_lb_constrain(0);
        vars__.push_back(beta_b);
        std::vector<double> alpha_raw;
        size_t alpha_raw_d_0_max__ = nsub;
        alpha_raw.reserve(alpha_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_raw_d_0_max__; ++d_0__) {
            alpha_raw.push_back(in__.scalar_constrain());
        }
        size_t alpha_raw_k_0_max__ = nsub;
        for (size_t k_0__ = 0; k_0__ < alpha_raw_k_0_max__; ++k_0__) {
            vars__.push_back(alpha_raw[k_0__]);
        }
        std::vector<double> beta_raw;
        size_t beta_raw_d_0_max__ = nsub;
        beta_raw.reserve(beta_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_raw_d_0_max__; ++d_0__) {
            beta_raw.push_back(in__.scalar_constrain());
        }
        size_t beta_raw_k_0_max__ = nsub;
        for (size_t k_0__ = 0; k_0__ < beta_raw_k_0_max__; ++k_0__) {
            vars__.push_back(beta_raw[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 32;
            validate_non_negative_index("alpha", "nsub", nsub);
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(nsub);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 33;
            validate_non_negative_index("beta", "nsub", nsub);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta(nsub);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 35;
            for (int p = 1; p <= nsub; ++p) {
                current_statement_begin__ = 36;
                stan::model::assign(alpha, 
                            stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), 
                            Phi_approx((alpha_a + (alpha_b * get_base1(alpha_raw, p, "alpha_raw", 1)))), 
                            "assigning variable alpha");
                current_statement_begin__ = 37;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), 
                            stan::math::exp((beta_a + (beta_b * get_base1(beta_raw, p, "beta_raw", 1)))), 
                            "assigning variable beta");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 32;
            check_greater_or_equal(function__, "alpha", alpha, 0);
            check_less_or_equal(function__, "alpha", alpha, 1);
            current_statement_begin__ = 33;
            check_greater_or_equal(function__, "beta", beta, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t alpha_j_1_max__ = nsub;
                for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                    vars__.push_back(alpha(j_1__));
                }
                size_t beta_j_1_max__ = nsub;
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    vars__.push_back(beta(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 76;
            validate_non_negative_index("loglik", "nsub", nsub);
            std::vector<double> loglik(nsub, double(0));
            stan::math::initialize(loglik, DUMMY_VAR__);
            stan::math::fill(loglik, DUMMY_VAR__);
            current_statement_begin__ = 77;
            validate_non_negative_index("genchoices", "ntrials", ntrials);
            validate_non_negative_index("genchoices", "nsub", nsub);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> genchoices(ntrials, nsub);
            stan::math::initialize(genchoices, DUMMY_VAR__);
            stan::math::fill(genchoices, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 81;
            for (int p = 1; p <= nsub; ++p) {
                {
                current_statement_begin__ = 82;
                validate_non_negative_index("Q", "2", 2);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> Q(2);
                stan::math::initialize(Q, DUMMY_VAR__);
                stan::math::fill(Q, DUMMY_VAR__);
                current_statement_begin__ = 84;
                stan::model::assign(Q, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable Q");
                current_statement_begin__ = 85;
                stan::model::assign(Q, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable Q");
                current_statement_begin__ = 86;
                stan::model::assign(loglik, 
                            stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable loglik");
                current_statement_begin__ = 88;
                for (int t = 1; t <= ntrials; ++t) {
                    current_statement_begin__ = 90;
                    stan::model::assign(genchoices, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list())), 
                                categorical_rng(softmax(multiply(Q, get_base1(beta, p, "beta", 1))), base_rng__), 
                                "assigning variable genchoices");
                    current_statement_begin__ = 91;
                    stan::model::assign(loglik, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), 
                                (stan::model::rvalue(loglik, stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list()), "loglik") + categorical_logit_log(get_base1(get_base1(choices, t, "choices", 1), p, "choices", 2), multiply(Q, get_base1(beta, p, "beta", 1)))), 
                                "assigning variable loglik");
                    current_statement_begin__ = 94;
                    stan::model::assign(Q, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(get_base1(choices, t, "choices", 1), p, "choices", 2)), stan::model::nil_index_list()), 
                                (get_base1(Q, get_base1(get_base1(choices, t, "choices", 1), p, "choices", 2), "Q", 1) + (get_base1(alpha, p, "alpha", 1) * (get_base1(reward, t, p, "reward", 1) - get_base1(Q, get_base1(get_base1(choices, t, "choices", 1), p, "choices", 2), "Q", 1)))), 
                                "assigning variable Q");
                }
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 76;
            size_t loglik_k_0_max__ = nsub;
            for (size_t k_0__ = 0; k_0__ < loglik_k_0_max__; ++k_0__) {
                vars__.push_back(loglik[k_0__]);
            }
            current_statement_begin__ = 77;
            size_t genchoices_j_2_max__ = nsub;
            size_t genchoices_j_1_max__ = ntrials;
            for (size_t j_2__ = 0; j_2__ < genchoices_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < genchoices_j_1_max__; ++j_1__) {
                    vars__.push_back(genchoices(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_fit_1a1b";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_b";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_raw_k_0_max__ = nsub;
        for (size_t k_0__ = 0; k_0__ < alpha_raw_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_raw" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_raw_k_0_max__ = nsub;
        for (size_t k_0__ = 0; k_0__ < beta_raw_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_raw" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t alpha_j_1_max__ = nsub;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_j_1_max__ = nsub;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t loglik_k_0_max__ = nsub;
        for (size_t k_0__ = 0; k_0__ < loglik_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "loglik" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t genchoices_j_2_max__ = nsub;
        size_t genchoices_j_1_max__ = ntrials;
        for (size_t j_2__ = 0; j_2__ < genchoices_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < genchoices_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "genchoices" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_a";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_b";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_raw_k_0_max__ = nsub;
        for (size_t k_0__ = 0; k_0__ < alpha_raw_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_raw" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_raw_k_0_max__ = nsub;
        for (size_t k_0__ = 0; k_0__ < beta_raw_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_raw" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t alpha_j_1_max__ = nsub;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_j_1_max__ = nsub;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t loglik_k_0_max__ = nsub;
        for (size_t k_0__ = 0; k_0__ < loglik_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "loglik" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t genchoices_j_2_max__ = nsub;
        size_t genchoices_j_1_max__ = ntrials;
        for (size_t j_2__ = 0; j_2__ < genchoices_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < genchoices_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "genchoices" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_fit_1a1b_namespace::model_fit_1a1b stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
